{"ast":null,"code":"import axios from 'axios';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { WALLET_CREATE_REQUEST, WALLET_CREATE_SUCCESS, WALLET_CREATE_FAIL, WALLET_DETAILS_FAIL, WALLET_DETAILS_SUCCESS, WALLET_DETAILS_REQUEST, WALLET_PAY_FAIL, WALLET_PAY_SUCCESS, WALLET_PAY_REQUEST, WALLET_LIST_MY_REQUEST, WALLET_LIST_MY_SUCCESS, WALLET_LIST_MY_FAIL, WALLET_LIST_FAIL, WALLET_LIST_SUCCESS, WALLET_LIST_REQUEST, WALLET_DELIVER_FAIL, WALLET_DELIVER_SUCCESS, WALLET_DELIVER_REQUEST } from '../constants/walletConstants';\nimport { logout } from './userActions';\nexport const createWallet = wallet => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: WALLET_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    var customerId = \"customerId\";\n    var newVal = userInfo._id;\n    wallet[customerId] = newVal;\n    const {\n      data\n    } = await axios.post(`/api/wallet/createWallet`, wallet, config);\n    dispatch({\n      type: WALLET_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: WALLET_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const getWalletDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: WALLET_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/wallet/${id}`, config);\n    dispatch({\n      type: WALLET_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: WALLET_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const getCustomerWallet = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: WALLET_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/wallet/customer/${userInfo._id}`, config);\n    console.log(\"data from action \" + JSON.stringify(data));\n    dispatch({\n      type: WALLET_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: WALLET_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ATUPSAMU/Desktop/shopping/src/actions/walletActions.js"],"names":["axios","CART_CLEAR_ITEMS","WALLET_CREATE_REQUEST","WALLET_CREATE_SUCCESS","WALLET_CREATE_FAIL","WALLET_DETAILS_FAIL","WALLET_DETAILS_SUCCESS","WALLET_DETAILS_REQUEST","WALLET_PAY_FAIL","WALLET_PAY_SUCCESS","WALLET_PAY_REQUEST","WALLET_LIST_MY_REQUEST","WALLET_LIST_MY_SUCCESS","WALLET_LIST_MY_FAIL","WALLET_LIST_FAIL","WALLET_LIST_SUCCESS","WALLET_LIST_REQUEST","WALLET_DELIVER_FAIL","WALLET_DELIVER_SUCCESS","WALLET_DELIVER_REQUEST","logout","createWallet","wallet","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","customerId","newVal","_id","data","post","payload","error","message","response","getWalletDetails","id","get","getCustomerWallet","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\nimport {\n  WALLET_CREATE_REQUEST,\n  WALLET_CREATE_SUCCESS,\n  WALLET_CREATE_FAIL,\n  WALLET_DETAILS_FAIL,\n  WALLET_DETAILS_SUCCESS,\n  WALLET_DETAILS_REQUEST,\n  WALLET_PAY_FAIL,\n  WALLET_PAY_SUCCESS,\n  WALLET_PAY_REQUEST,\n  WALLET_LIST_MY_REQUEST,\n  WALLET_LIST_MY_SUCCESS,\n  WALLET_LIST_MY_FAIL,\n  WALLET_LIST_FAIL,\n  WALLET_LIST_SUCCESS,\n  WALLET_LIST_REQUEST,\n  WALLET_DELIVER_FAIL,\n  WALLET_DELIVER_SUCCESS,\n  WALLET_DELIVER_REQUEST,\n} from '../constants/walletConstants'\nimport { logout } from './userActions'\n\nexport const createWallet = (wallet) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: WALLET_CREATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    var customerId = \"customerId\";\n    var newVal = userInfo._id;\n\n\n    wallet[customerId] = newVal;\n\n    const { data } = await axios.post(`/api/wallet/createWallet`, wallet, config)\n\n    dispatch({\n      type: WALLET_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: WALLET_CREATE_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const getWalletDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: WALLET_DETAILS_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/wallet/${id}`, config)\n\n    dispatch({\n      type: WALLET_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: WALLET_DETAILS_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const getCustomerWallet = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: WALLET_DETAILS_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/wallet/customer/${userInfo._id}`, config)\n    console.log(\"data from action \" + JSON.stringify(data));\n\n    dispatch({\n      type: WALLET_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: WALLET_DETAILS_FAIL,\n      payload: message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}